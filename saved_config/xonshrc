import os
import sys
import shutil
import socket
import subprocess

def _abreviated_path():
    path = os.getcwd()
    path = path.replace('/home/jdgoal512', '~')
    dirs = path.split('/')
    path = ""
    if len(dirs):
        for dir in dirs[:-1]:
            if len(dir) > 3:
                path += dir[:3] + '/'
            else:
                path += dir + '/'
        path += dirs[-1]
    return path

def _prompt():
    path = os.getcwd()
    path = path.replace('/home/jdgoal512', '~')
    # dirs = [f'\033[91m{dir}' for dir in path.split('/')]
    dirs = path.split('/')
    full_prompt = ""
    if len(dirs):
        for dir in dirs[:-1]:
            if len(dir) > 3:
                full_prompt += '{ITALIC_BLUE}' + dir[:3] + '{CYAN}/'
            else:
                full_prompt += '{BLUE}' + dir + '{CYAN}/'
        full_prompt += '{BOLD_BLUE}' + dirs[-1]
    full_prompt += '{BOLD_WHITE}{prompt_end}{WHITE} '
    return full_prompt

$PROMPT = _prompt
# $PROMPT = f'xonsh {_abreviated_path()}'
# $PROMPT = '{prompt_end} '
$XONSH_SHOW_TRACEBACK = True
# $TITLE = f'xonsh {_abreviated_path()}'
$PROMPT_FIELDS['title'] = lambda: $PROMPT_FIELDS['current_job'] or 'xonsh'
$TITLE = '{title} {short_cwd}'
# $BOTTOM_TOOLBAR = '{user}@{hostname}:{cwd} {branch_color}{curr_branch}{gitstatus}'


# fn ag [@args]{ /usr/bin/ag "--ignore-dir=env" "--ignore-dir=site-packages" $@args }

def _path(args, stdin):
    if len(args):
        print(f'{os.getlogin()}@{socket.gethostbyname(socket.gethostname())}:{os.getcwd()}/{args[0]}')
    else:
        pwd

aliases['p'] = _path

def _save_path(args, stdin):
    pwd > ~/.elvish/saved_path
aliases['sp'] = _save_path

def _load_path(args, stdin):
    cd $(cat ~/.elvish/saved_path)
aliases['lp'] = _load_path

$PATH = [
  '~/bin',
  '~/.local/bin',
  '/usr/local/bin',
  '/usr/local/sbin',
  '/usr/sbin',
  '/sbin',
  '/usr/bin',
  '/bin',
  '/usr/games',
  '/snap/bin',
]

$PYTHONPATH = [
]

cd_history = []

cd_aliases = {
    'Downloads': '~/Downloads/',
}

def c4ssh(args, stdin):
    ip = args[0]
    sshpass -f~/.ssh/c4 ssh root@ip

def _pip(args, stdin):
    if args[0] == 'search':
        subprocess.run(['poetry', 'search', *args[1:]])
    else:
        subprocess.run(['python3', '-m', 'pip',  *args])

aliases['pip'] = _pip

execx($(zoxide init xonsh), 'exec', __xonsh__.ctx, filename='zoxide')

def _cd(args, stdin):
    global cd_history
    dir = "" 
    add_to_history = True
    if len(args) == 0:
        dir = '~'
    elif args[0] == '-':
        if os.path.isdir('-'):
            dir = '-'
        else:
            if len(cd_history):
                dir = cd_history.pop()
                add_to_history = False
            else:
                dir = '.'
    else:
        dir = args[0].strip()
        # while (re:match '\.\.\.' $dir) {
        #     dir = (re:replace '\.\.\.' '../..' $dir)
        # }
    if not os.path.isdir(dir) and dir in cd_aliases.keys():
        dir = cd_aliases[dir]
    if add_to_history:
        cd_history += [os.getcwd()]
    try:
        # os.chdir(os.path.expanduser(dir))
        echo @(dir)
        if dir == '~':
            z
        else:
            z @(dir)
        # ls --color=auto
        eza
    except Exception as err:
        print(err)

aliases['cd'] = _cd

def _ls(args, stdin):
    eza @(args)

aliases['ls'] = _ls
aliases['sl'] = _ls

def _safe_rm(args, stdin):
    TRASH_DIR = os.path.expanduser('~/.trash')
    force_delete = False
    all_exist = True

    for arg in args:
        exists = os.path.isfile(arg) or os.path.isdir(arg)
        # print(f'{arg}: {exists}')
        # Check for flags
        if arg.startswith('-') and not exists:
            if 'f' in arg:
                force_delete = True
        elif not exists:
            print(f'{arg} does not exist')
            all_exist = False
    # print('------')
    # print(f'Force delete: {force_delete}')
    # print(f'All exist: {all_exist}')
    if not all_exist:
        print('\033[31mError deleting file\033[0m', file=sys.stderr)
        return
    if force_delete:
        for arg in args:
            if os.path.isfile(arg):
                os.remove(arg)
            if os.path.isdir(arg):
                shutil.rmtree(arg)
    else:
        if not os.path.isdir(TRASH_DIR):
            os.mkdir(TRASH_DIR)
        for arg in args:
            exists = os.path.isfile(arg) or os.path.isdir(arg)
            if exists:
                try:
                    os.rename(arg, f'{TRASH_DIR}/{arg}')
                except OSError as err:
                    if err.errno == 18:
                        if os.path.isfile(arg):
                            os.remove(arg)
                        if os.path.isdir(arg):
                            shutil.rmtree(arg)
                    else:
                        raise err

aliases['rm'] = _safe_rm
# fn ls [@args]{ e:exa $@args }
# fn l [@args]{ e:ls --color=auto -lah $@args }
# fn sl [@args]{ ls $@args }
# fn LS [@args]{ ls $@args }
# fn grep [@args]{ e:grep --color=auto --exclude-dir={env,site-packages,.bzr,CVS,.git,.hg,.svn} $@args }

# fn cat [@args]{
#     if (has-external highlight) {
#         (external highlight) -O ansi --stdout --force $@args
#     } else {
#         (external cat) $@args
#     }
# }

aliases['cat'] = 'batcat -p'
aliases['bat'] = 'batcat'
aliases['lsblk'] = 'lsblk | grep -v loop'



# from xonsh.tools import register_custom_style
# mystyle = {
#     "Literal.String.Single": "#ff88aa",
#     "Literal.String.Double": "#ff4488",
#     "RED": "#008800",
# }

$XONSH_COLOR_STYLE = 'native'

$LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=103;30;01:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:';
# register_custom_style("mystyle", mystyle, base="default")
# $XONSH_COLOR_STYLE="mystyle"

$MANPAGER="sh -c 'col -bx | batcat -l man -p'"
$DBUS_SESSION_BUS_ADDRESS="unix:path=" + $XDG_RUNTIME_DIR + "/bus"
