if [ -f $HOME/.zsh/motd ]; then
    source ~/.zsh/motd
fi

if [ -f ~/.profile ]; then
    source ~/.profile
fi

export JAVA_HOME='/usr/lib/jvm/java-8-jdk'
export EDITOR="/usr/bin/vim"
export MAKEFLAGS="-j$(expr $(nproc) \+ 1)"

alias override='sudo $(fc -ln -1)'
alias sl='ls --color=auto'
alias :q='exit'
alias viewnetwork='sudo arp-scan --interface=wlp2s0 --localnet'
alias getip="ifconfig | grep inet | grep broadcast | awk "\''{print$2}'\'
alias nolonglines="sed '/^.\{500\}./d'"
#alias poweroff="/usr/bin/systemctl poweroff"
#alias reboot="/usr/bin/systemctl reboot"
alias sc='systemctl'
alias graphviz='dot -Tx11'

#Add syntax highlighting in cat if available
which highlight 1>/dev/null 2>/dev/null
if [ $? -eq 0 ]; then
    alias cat="highlight -O ansi --stdout --force"
    alias cat2="/bin/cat"
fi

#Make cd do an ls afterwards
cdls() {
    new_directory="$*";
    if [ $# -eq 0 ]; then 
        new_directory=${HOME};
    fi;
    if [ ! -z $1 ] && [ $1 = cd ] && [ ! -z $2 ]; then
        builtin cd $2 2>/dev/null
        if [ $? -eq 0 ]; then
            ls --color=auto
        else
            echo no such file or directory: $2
        fi
    else
        builtin cd $new_directory 2>/dev/null
        if [ $? -eq 0 ]; then
            ls --color=auto
        else
            echo no such file or directory: $1
        fi
    fi
}
alias cd='cdls'

kj () {
        job="$(jobs -l | awk '{print $3}' | tail -n1)"
        if [ "$job" != "" ]
        then
                kill $job && fg
        fi
}

#Load oh-my-zsh libraries
for config_file ($HOME/.zsh/lib/*.zsh); do
    source $config_file
done

#Set the theme
if [ $UID -ne 0 ]; then
    ZSH_THEME="eastwood"
else
    ZSH_THEME="clean"
fi
source "$HOME/.zsh/themes/$ZSH_THEME.zsh-theme"

#Load plugins
source $HOME/.zsh/plugins/zsh-autosuggestions.zsh #Add autosuggetions
source $HOME/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh #Add syntax highlighting
#source $HOME/.zsh/plugins/bash.command-not-found #Add insults


# A shortcut function that simplifies usage of xclip.
# - Accepts input from either stdin (pipe), or params.
# ------------------------------------------------
cb() {
  local _scs_col="\e[0;32m"; local _wrn_col='\e[1;31m'; local _trn_col='\e[0;33m'
  # Check that xclip is installed.
  if ! type xclip > /dev/null 2>&1; then
    echo -e "$_wrn_col""You must have the 'xclip' program installed.\e[0m"
  # Check user is not root (root doesn't have access to user xorg server)
  elif [[ "$USER" == "root" ]]; then
    echo -e "$_wrn_col""Must be regular user (not root) to copy a file to the clipboard.\e[0m"
  else
    # If no tty, data should be available on stdin
    if ! [[ "$( tty )" == /dev/* ]]; then
      input="$(< /dev/stdin)"
    # Else, fetch input from params
    else
      input="$*"
    fi
    if [ -z "$input" ]; then  # If no input, print usage message.
      echo "Copies a string to the clipboard."
      echo "Usage: cb <string>"
      echo "       echo <string> | cb"
    else
      # Copy input to clipboard
      echo -n "$input" | xclip -selection c
      # Truncate text for status
      if [ ${#input} -gt 80 ]; then input="$(echo $input | cut -c1-80)$_trn_col...\e[0m"; fi
      # Print status.
      echo -e "$_scs_col""Copied to clipboard:\e[0m $input"
    fi
  fi
}
hex () {
	printf "obase=16; %s\n" $1 | bc | tr "[A-Z]" "[a-z]"
}
#unalias ls
newls() {
    args="$@"
    if [ ! -z "$1" ]; then
        LONG_OUTPUT=$(expr match "$args" '-[^ ]*l.*$')
        if [ "$LONG_OUTPUT" -ne 0 ]; then
            /bin/ls "$@" | lolcat
            return
        fi
    fi
    max_length=$(/bin/ls -p "$@" | gawk '{ print length }' | sort -rn | head -1)
    term_width=$(tput cols)
    ncols=$(( term_width / ( max_length + 1 ) ))
    /bin/ls -p "$@" | pr -bt"$ncols" -w "$term_width" | lolcat
}
# Aliases / functions leveraging the cb() function
# ------------------------------------------------
# Copy contents of a file
function cbf() { /bin/cat "$1" | cb; }
# Copy SSH public key
alias cbssh="cbf ~/.ssh/id_rsa.pub"
# Copy current working directory
alias cbwd="pwd | cb"
# Copy most recent command in bash history
alias cbhs="/bin/cat $HISTFILE | tail -n 1 | cb"
